@page "/import/serie"
@using MovManagerr.Core.Data.Abstracts;

@inject ImportContentService ImportContentService
@inject DialogService DialogService

@if (CurrentStep == ImportStep.SelectFiles)
{
    <div class="row py-2">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Ajouter une serie ou saison complète (Dossiers)</h5>
                    <p class="card-text">Cliquez sur le bouton ci-dessous pour importer un dossier de médias.</p>
                    <button class="btn btn-dark btn-lg btn-block" @onclick="@(args => BrowseFolders())"><i class="fa fa-upload"></i> Importer des médias (Dossiers)</button>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Ajouter certains épisodes(Fichiers)</h5>
                    <p class="card-text">Cliquez sur le bouton ci-dessous pour importer des fichiers de médias individuels.</p>
                    <button class="btn btn-outline-dark btn-lg btn-block" @onclick="@(args => BrowseFiles())"><i class="fa fa-upload"></i> Importer des médias (Fichiers)</button>
                </div>
            </div>
        </div>
    </div>
}
else if (CurrentStep == ImportStep.validateImport)
{
}


@*
@if (CurrentMovie != null)
{
    <div class="fixed-bottom p-1">
        <RadzenCard>
            <div class="row mx-2 my-2">
                <div class="col-12">
                    <RadzenSwitch @bind-Value=@CurrentMovie.IsTranscodeRequired></RadzenSwitch>
                    <span class="my-1">Activer le transcodage</span>
                </div>
            </div>
            <div class="row mx-2">
                <div class="col-6">
@*                    <RadzenButton ButtonStyle="ButtonStyle.Danger" class="w-100" Icon="cancel" Shade=Shade.Lighter Variant="Variant.Filled" Click=@(args => CancelCurrent()) Text="Annuler l'ajout" />
                </div>
                <div class="col-6">
                    <RadzenButton Disabled=!CurrentMovie.ReadyToImport ButtonStyle="ButtonStyle.Primary" class="w-100" Icon="done" Shade=Shade.Lighter Variant="Variant.Filled" Click=@(args => Submit()) Text="Ajouter le film à Plex" />
                </div>
            </div>
        </RadzenCard>
    </div>
}*@

@code {

    public enum ImportStep
    {
        SelectFiles = 0,
        validateImport = 1
    }

    private ImportStep CurrentStep { get; set; } = ImportStep.SelectFiles;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public Task BrowseFiles()
    {
        return BrowseMovieFile(new OpenDialogProperty[] { OpenDialogProperty.openFile, OpenDialogProperty.multiSelections });
    }

    public Task BrowseFolders()
    {
        return BrowseMovieFile(new OpenDialogProperty[] { OpenDialogProperty.openDirectory, OpenDialogProperty.multiSelections });
    }

    /// <summary>
    /// Opens a dialog to browse for movie files.
    /// </summary>
    async Task BrowseMovieFile(OpenDialogProperty[] type)
    {
        if (HybridSupport.IsElectronActive)
        {
            var mainWindow = Electron.WindowManager.BrowserWindows.First();

            var options = new OpenDialogOptions
                {
                    Properties = type
                };

            string[] files = await Electron.Dialog.ShowOpenDialogAsync(mainWindow, options);

            if (!files.Any())
            {
                var notOptions = new NotificationOptions("Avertissement", $"Aucun fichier a été selectionnée");
                Electron.Notification.Show(notOptions);
                return;
            }

            LoadPanel.ShowLoader();

            //foreach (var file in files)
            //{
            //    FileAttributes attr = File.GetAttributes(file);

            //    if (attr.HasFlag(FileAttributes.Directory))
            //    {
            //        ProceedFolder(file);
            //    }
            //    else
            //    {
            //        AppendFileToPending(file);
            //    }
            //}

            //// Set CurrentMovie to the first movie in the list
            //if (CurrentMovie == null && PendingMovies.Count > 0)
            //{
            //    CurrentMovie = PendingMovies[0];
            //    await LoadMovieData(CurrentMovie);
            //}

            LoadPanel.HideLoader();
        }
    }

    private void ProceedFolder(string folder)
    {
        var files = Directory.GetFiles(folder, "*.*", SearchOption.AllDirectories)
            .Where(s => s.EndsWith(".mkv") || s.EndsWith(".mp4") || s.EndsWith(".avi"));

        foreach (var file in files)
        {
            //AppendFileToPending(file);
        }
    }
}