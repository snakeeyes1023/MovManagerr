@using MovManagerr.Core.Infrastructures.Loggers
@inject IJSRuntime JS

­<div>
    <RadzenText TextStyle="TextStyle.Subtitle2" Class="d-flex mt-1 mb-0">
        Tous les logs
    </RadzenText>
    <div class="logBox border-top" ref="logBoxRef">
        @foreach (var item in SimpleLogger.Logs.OrderByDescending(x => x.CreatedDate))
        {

            AlertStyle alertType;

            switch (item.Type)
            {
                case LogType.Unknown:
                    alertType = AlertStyle.Base;
                    break;
                case LogType.Info:
                    alertType = AlertStyle.Info;
                    break;
                case LogType.Warning:
                    alertType = AlertStyle.Warning;
                    break;
                case LogType.Error:
                    alertType = AlertStyle.Danger;
                    break;
                default:
                    alertType = AlertStyle.Base;
                    break;
            }




            <RadzenAlert Variant="Variant.Flat" AlertStyle="alertType" Icon="info_outline" Shade="Shade.Lighter" Size="AlertSize.Small" AllowClose=false>
                <b>@(item.CreatedDate.ToShortDateString()) @(item.CreatedDate.ToLongTimeString()) : </b>  @((MarkupString)item.Log.Message)
            </RadzenAlert>
        }


    </div>

</div>



<style>
    .logBox {
        height: 200px;
        overflow-y: scroll;
        overflow-x: hidden;
        scroll-behavior: smooth;
    }

</style>


@code {

    private ElementReference logBoxRef;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SimpleLogger.OnLogged += OnMyChangeHandler;
    }

    public void Dispose()
    {
        SimpleLogger.OnLogged -= OnMyChangeHandler;
    }


    private async void OnMyChangeHandler(TypedLog log)
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("scrollToBottom", logBoxRef);
    }
}

