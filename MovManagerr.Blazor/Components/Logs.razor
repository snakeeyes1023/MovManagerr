@using MovManagerr.Core.Infrastructures.Loggers
@using MovManagerr.Core.Tasks
@using System.IO;
@inject IJSRuntime JS

­<div>
    <RadzenText TextStyle="TextStyle.Subtitle2" Class="d-flex mt-1 mb-0">
        Tous les logs
    </RadzenText>
    <div class="logBox border-top" ref="logBoxRef">
        @foreach (var item in SimpleLogger.Logs.OrderByDescending(x => x.CreatedDate))
        {

            AlertStyle alertType;

            switch (item.Type)
            {
                case LogType.Unknown:
                    alertType = AlertStyle.Base;
                    break;
                case LogType.Info:
                    alertType = AlertStyle.Info;
                    break;
                case LogType.Warning:
                    alertType = AlertStyle.Warning;
                    break;
                case LogType.Error:
                    alertType = AlertStyle.Danger;
                    break;
                default:
                    alertType = AlertStyle.Base;
                    break;
            }

            <RadzenAlert Variant="Variant.Flat" AlertStyle="alertType" Icon="info_outline" Shade="Shade.Lighter" Size="AlertSize.Small" AllowClose=false>
                <b>@(item.CreatedDate.ToShortDateString()) @(item.CreatedDate.ToLongTimeString()) : </b>  @((MarkupString)item.Log.Message)
            </RadzenAlert>
        }
    </div>
</div>


@code {

    private ElementReference logBoxRef;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SimpleLogger.OnLogged += OnMyChangeHandler;
    }

    public void Dispose()
    {
        SimpleLogger.OnLogged -= OnMyChangeHandler;
    }


    private async void OnMyChangeHandler(TypedLog log)
    {
        await InvokeAsync(() =>
            {
                StateHasChanged();
            });

        if (log.Log is NotificationLog notification)
        {
            var options = new NotificationOptions(notification.Title, notification.Message);
            Electron.Notification.Show(options);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("scrollToBottom", logBoxRef);
    }
}

