using Microsoft.AspNetCore.Components;
using MovManagerr.Core.Infrastructures.TrackedTasks;
using Radzen;
using Radzen.Blazor.Rendering;
using System;
using System.Threading.Tasks;
using System.Timers;
using WebSocket4Net.Command;

namespace MovManagerr.Blazor.Components.Jobs
{
    public class JobProgressBase<T> : ComponentBase, IDisposable where T : TrackedJobProgression
    {
        [Parameter]
        public T Job { get; set; }

        [Parameter]
        public Action RefreshList { get; set; }

        [Inject]
        public DialogService DialogService { get; set; }

        protected override void OnInitialized()
        {
            base.OnInitialized();
            
            Job.ProgressChanged += OnProgressChanged;
            Job.StatusChanged += OnStatusChanged;
            Job.Timer.Elapsed += OnTimerElapsed;
        }

        private void OnTimerElapsed(object sender, ElapsedEventArgs e)
        {
            InvokeAsync(() => StateHasChanged());
        }

        protected virtual void OnProgressChanged(TrackedJobProgression progression)
        {
            InvokeAsync(() => StateHasChanged());
        }

        protected virtual void OnStatusChanged(object sender, StatusChangedEventArgs e)
        {
            RefreshList?.Invoke();
        }

        public virtual void Dispose()
        {
            Job.ProgressChanged -= OnProgressChanged;
            Job.StatusChanged -= OnStatusChanged;
            Job.Timer.Elapsed -= OnTimerElapsed;
        }
        
        public virtual async Task Delete()
        {
            if (Job.AutoGeneratedId)
            {
                await DialogService.Alert("Cette tâche ne peut pas être supprimée car elle est générée automatiquement.", "Suppression impossible");
            }
            else
            {
                string message = "Voulez vous vraiment supprimer cette tâche ?";
                bool? result = await DialogService.Confirm(message, "Confirmation", new ConfirmOptions() { OkButtonText = "Supprimer", CancelButtonText = "Annuler" });

                if (result == true)
                {
                    GlobalTrackedTask.RemoveJob(Job);
                }
            }
        }
    }
}
