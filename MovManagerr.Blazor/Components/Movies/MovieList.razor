@using System.Timers
@using MovManagerr.Core.Data.Abstracts


@inject IMovieService movieService
@inject IDownloadedMovieService downloadedMovieService
@inject DialogService DialogService
@inject IServiceProvider ServiceProvider


@implements IDisposable;


<div class="col-12 mt-0 pt-0">
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Rechercher un film</RadzenText>
        <RadzenTextBox @oninput=@(args => InputQueryChanged(args.Value.ToString())) Class="w-100" />
        <div class="row no-gutters my-3">
            <RadzenSwitch class="mr-2" @bind-Value=OnlyDownloaded />
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H3">Afficher seulement les contenues téléchargé</RadzenText>
        </div>
        <RadzenButton class="my-2" Icon="refresh" Text="Rafraîchir" Click="((args) => OnChange())" />
    </RadzenCard>
</div>

<div class="col-12 movie-list my-2">
    <RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" HorizontalAlign="HorizontalAlign.Right" Count="count" PageSize="@(searchQuery.Take)" PageNumbersCount="5" PageChanged="@PageChanged" />
    <RadzenDataList WrapItems="true" AllowPaging="false" Data="@movies" TItem="Movie">
        <Template Context="movie">
            <RadzenCard Style="width:300px;">
                <div class="row">
                    <div class="col-12">
                        <img class="img-fluid my-auto" style="max-width: 300px; display: block; margin-left: auto; margin-right: auto;" src="@(movie.GetCorrectedPoster())">
                    </div>
                </div>
                <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                <div class="row">
                    <div class="col-md-12 text-truncate">
                        (@(movie.TmdbMovie?.ReleaseDate.GetValueOrDefault().Year)) <b>@(movie.Name)</b>
                    </div>
                    <div class="col-md-12">
                        @foreach (var badge in movie.GetCombinedTags())
                        {
                            <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@(badge) />
                        }
                    </div>
                </div>
                <div class="mt-3">
                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Outlined" Click=@(args => ShowMovieDialog(movie)) Text="Télécharger" />
                </div>
            </RadzenCard>
        </Template>
    </RadzenDataList>
</div>

<style>
    .movie-list {
        overflow-y: hidden;
    }
</style>

@code {

    IEnumerable<Movie> movies;
    string pagingSummaryFormat = "Page {0} sur {1} (total {2} films)";
    int count;

    private Timer aTimer = default!;

    SearchQuery searchQuery;

    private bool OnlyDownloaded = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        aTimer = new Timer(1000);
        aTimer.Elapsed += OnChange;
        aTimer.AutoReset = false;

        searchQuery = new SearchQuery()
            {
                Skip = 0,
                Take = 20
            };
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            OnChange();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    async Task ShowMovieDialog(Movie movie)
    {
        await DialogService.OpenAsync<Contents.Show>(string.Empty,
            new Dictionary<string, object>() { { "ID", movie._id } },
            new DialogOptions() { Width = "95%", Height = "95%", CloseDialogOnOverlayClick = true, CloseDialogOnEsc = true });
    }

    #region Content query

    protected void InputQueryChanged(string newQuery)
    {
        searchQuery.EnteredText = newQuery;
        aTimer.Stop();
        aTimer.Start();
    }

    protected async void OnChange(Object? source = null, ElapsedEventArgs e = null)
    {
        await InvokeAsync(() =>
        {
            IBaseContentService<Movie> moviesQuery = !OnlyDownloaded ? downloadedMovieService : movieService;

            if (string.IsNullOrWhiteSpace(searchQuery.EnteredText))
            {
                movies = moviesQuery.GetAll(searchQuery.Skip, searchQuery.Take);
                count = moviesQuery.GetCount();
            }
            else
            {
                movies = moviesQuery.GetCandidates(searchQuery);
                count = moviesQuery.GetCandidates(new SearchQuery() { EnteredText = searchQuery.EnteredText }).Count();
            }

            StateHasChanged();
        });
    }

    void PageChanged(PagerEventArgs args)
    {
        searchQuery.Skip = args.Skip;
        searchQuery.Take = args.Top;
        OnChange();
    }

    void IDisposable.Dispose() => aTimer?.Dispose();

    #endregion
}
