@using System.Threading;
@inherits LayoutComponentBase

<div class="page">

    <RadzenDialog />


    <RadzenLayout>
        <RadzenHeader>
            <div class="d-flex align-items-center">
                <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
                <RadzenLabel Text="Movmanagerr" />
            </div>
        </RadzenHeader>
        <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
            @{
                bool isValid = Preferences.Instance.IsValid();
            }
            <RadzenPanelMenu>
                <RadzenPanelMenuItem Text="Films">
                    <RadzenPanelMenuItem Visible=isValid Text="Voir mes films" Icon="list" Path="/imported/movie" />
                    <RadzenPanelMenuItem Visible=isValid Text="Transferer des films" Icon="downloading" Path="/import/movie" />
                    <RadzenPanelMenuItem Visible=isValid Text="Importation en batch" Icon="list" Path="/scan/movie" />
                </RadzenPanelMenuItem>

                <RadzenPanelMenuItem Visible=isValid Text="Afficher les tâches en cours" Icon="list" Path="/HangfireContainer" />
                <RadzenPanelMenuItem Visible=isValid Text="En attente" Icon="list" Path="/taskprogress" />

                <RadzenPanelMenuItem Text="Paramètre">
                    <RadzenPanelMenuItem Text="Général" Icon="settings" Path="/config/general" />
                </RadzenPanelMenuItem>
            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody>
            @Body
        </RadzenBody>
        <RadzenFooter Style="max-height: 45px">
            <button class="link-button" @onclick=ToggleLogDropdown>@(logDropdownVisible ? "Cacher les logs" : "Voir les logs")</button> - Version actuelle : <button class="link-button">@actualVersion</button> - Dernière syncronisation : @(LastSync.ToShortDateString()) à @(LastSync.ToShortTimeString()). <button class="link-button" @onclick="(() => Syncronize())">Vérifier les mises à jour</button>

            <div class="log-dropdown" style="display:@(logDropdownVisible ? "block" : "none")">
                <Logs></Logs>
            </div>

            <MovManagerr.Blazor.Components.Updates.UpdateManager @ref=updateManager />
        </RadzenFooter>
    </RadzenLayout>
</div>


@code {

    private bool logDropdownVisible = false;


    private void ToggleLogDropdown()
    {
        logDropdownVisible = !logDropdownVisible;
    }

    bool sidebar1Expanded = true;

    MovManagerr.Blazor.Components.Updates.UpdateManager updateManager;

    public static DateTime LastSync;

    public string actualVersion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        actualVersion = "Inconnue";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && HybridSupport.IsElectronActive)
        {
            CancellationTokenSource cts = new CancellationTokenSource();
            CancellationToken token = cts.Token;
            cts.CancelAfter(2000);
            actualVersion = await Electron.App.GetVersionAsync(token);

            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    protected async Task Syncronize()
    {
        if (HybridSupport.IsElectronActive)
        {
            try
            {
                await updateManager.CheckForUpdates();
            }
            catch (Exception ex)
            {
                SimpleLogger.AddLog(ex.Message, LogType.Error);
            }
        }
        LastSync = DateTime.Now;
        StateHasChanged();
    }
}
