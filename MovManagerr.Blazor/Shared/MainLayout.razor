@using System.Threading;
@inherits LayoutComponentBase

<div class="page">

    <RadzenDialog />


    <RadzenLayout>
        <RadzenHeader>
            <div class="d-flex align-items-center">
                <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
                <RadzenLabel Text="Movmanagerr" />
            </div>
        </RadzenHeader>
        <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
            @{
                bool isValid = Preferences.Instance.IsValid();
            }
            <RadzenPanelMenu>
                <RadzenPanelMenuItem Text="Films">
                    <RadzenPanelMenuItem Visible=isValid Text="Voir mes films" Icon="list" Path="/imported/movie" />
                    <RadzenPanelMenuItem Visible=isValid Text="Transferer des films" Icon="downloading" Path="/import/movie" />
                    <RadzenPanelMenuItem Visible=isValid Text="Importation en batch" Icon="list" Path="/scan/movie" />
                </RadzenPanelMenuItem>

                <RadzenPanelMenuItem Visible=isValid Text="Afficher les tâches en cours" Icon="list" Path="/HangfireContainer" />

                <RadzenPanelMenuItem Text="Paramètre">
                    <RadzenPanelMenuItem Text="Général" Icon="settings" Path="/config/general" />
                </RadzenPanelMenuItem>
            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody>

            <RadzenSplitter Orientation="Orientation.Vertical" style="height: 90vh;">
                <RadzenSplitterPane Size="90%">
                    <RadzenSplitter>
                        <RadzenSplitterPane>
                            <MovManagerr.Blazor.Components.Updates.UpdateManager />
                            <div style="overflow-y: scroll; overflow-x: hidden; height: 100%">
                                <div class="p-2">
                                    @Body
                                </div>
                            </div>

                        </RadzenSplitterPane>
                    </RadzenSplitter>
                </RadzenSplitterPane>
                <RadzenSplitterPane>
                    <RadzenSplitter>
                        <RadzenSplitterPane>
                            <div style="overflow-y: scroll; overflow-x: hidden; height: 100%; scroll-behavior: smooth;">
                                <Logs></Logs>
                            </div>
                        </RadzenSplitterPane>
                    </RadzenSplitter>
                </RadzenSplitterPane>
            </RadzenSplitter>

        </RadzenBody>
        <RadzenFooter Style="max-height: 45px">
            Version actuelle : <a href="@actualVersion">@actualVersion</a>. Dernière syncronisation : @(LastSync.ToShortDateString()) à @(LastSync.ToShortTimeString()). <a href="" @onclick="(() => Syncronize())">Vérifier les mises à jour</a>


            <MovManagerr.Blazor.Components.Updates.UpdateManager @ref=updateManager />
        </RadzenFooter>
    </RadzenLayout>
</div>

@code {
    bool sidebar1Expanded = true;

    MovManagerr.Blazor.Components.Updates.UpdateManager updateManager;

    public static DateTime LastSync;

    public string actualVersion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        actualVersion = "Inconnue";

        if (HybridSupport.IsElectronActive)
        {
            CancellationTokenSource cts = new CancellationTokenSource();
            CancellationToken token = cts.Token;
            cts.CancelAfter(1000);
            actualVersion = await Electron.App.GetVersionAsync(token);
        }
    }

    protected async Task Syncronize()
    {
        if (HybridSupport.IsElectronActive)
        {
            try
            {
                await updateManager.CheckForUpdates();
            }
            catch (Exception ex)
            {
                SimpleLogger.AddLog(ex.Message, LogType.Error);
            }
        }
        LastSync = DateTime.Now;
        StateHasChanged();
    }
}
