using Hangfire;
using MovManagerr.Core.Infrastructures.Loggers;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovManagerr.Core.Infrastructures.TrackedTasks
{
    public static class GlobalTrackedTask
    {
        public static IEnumerable<TrackedJobProgression> TrackedJobs
        {
            get
            {
                return _trackedJobs;
            }
        }

        public static event Action OnJobChanged;

        private static List<TrackedJobProgression> _trackedJobs = new List<TrackedJobProgression>();

        public static T AddTrackedJob<T>(T trackedJob) where T : TrackedJobProgression
        {
            if (_trackedJobs.FirstOrDefault(x => x.JobId == trackedJob.JobId) is T job)
            {
                return job;
            }
            else
            {
                _trackedJobs.Add(trackedJob);
                OnJobChanged?.Invoke();
                return trackedJob;
            }
        }

        public static void RemoveJob<T>(T trackedJob) where T : TrackedJobProgression
        {
            if (trackedJob.Status != TrackedJobStatus.Succeeded)
            {
                StopWorkingJob(trackedJob);
            }
            else
            {
                _trackedJobs = _trackedJobs.Where(x => x != trackedJob).ToList();
            }

            OnJobChanged?.Invoke();
        }

        private static bool StopWorkingJob<T>(T trackedJob) where T : TrackedJobProgression
        {
            try
            {
                if (!trackedJob.AutoGeneratedId)
                {
                    if (!BackgroundJob.Delete(trackedJob.JobId))
                    {
                        throw new InvalidOperationException("Impossible d'arrêté la tâche.");
                    }
                    else
                    {
                        _trackedJobs = _trackedJobs.Where(x => x != trackedJob).ToList();
                        return true;
                    }
                }
                else
                {
                    throw new InvalidOperationException("Cette tâche n'est pas géré par hangfire et ne peut être arrêté.");
                }
            }
            catch (Exception ex)
            {
                SimpleLogger.AddLog($"Une erreur c'est produite : {ex.Message}");
            }

            return false;
        }

        public static TrackedJobProgression? GetJobById(string id)
        {
            return _trackedJobs.FirstOrDefault(x => x.JobId == id);
        }
    }
}
